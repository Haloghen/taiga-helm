# Default values for taiga.

imagePullSecrets: []
# - name: "image-pull-secret"

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []




taigaAsyncRabbitmq:
  image:
    registry: docker.io
    repository: rabbitmq
    tag: 3.9.22-management-alpine
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath: /var/lib/rabbitmq
    size: 2Gi
    annotations: {}
    labels: {}
    selector: {}
  
  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: amqp
        protocol: TCP
        port: 5672
        targetPort: 5672

taigaAsync:
  image:
    registry: docker.io
    repository: taigaio/taiga-back
    tag: 6.5.1
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: back
        portocol: TCP
        port: 8000
        targetPort: 8000

taigaBack:
  image:
    registry: docker.io
    repository: taigaio/taiga-back
    tag: 6.5.1
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: back
        portocol: TCP
        port: 8000
        targetPort: 8000

taigaDB:
  image:
    registry: docker.io
    repository: postgres
    tag: 14.5-alpine
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath: /var/lib/postgresql/data
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: postgres
        protocol: TCP
        port: 5432
        targetPort: 5432

taigaEventsRabbitmq:
  image:
    registry: docker.io
    repository: rabbitmq
    tag: 3.9.22-management-alpine
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath: /var/lib/rabbitmq
    size: 2Gi
    annotations: {}
    labels: {}
    selector: {}
  
  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: amqp
        protocol: TCP
        port: 5672
        targetPort: 5672

taigaEvents:
  image:
    registry: docker.io
    repository: taigaio/taiga-events
    tag: 6.5.0
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: events
        protocol: TCP
        port: 8888
        targetPort: 8888

taigaFront:
  image:
    registry: docker.io
    repository: taigaio/taiga-front
    tag: 6.5.1
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: http

taigaGateway:
  image:
    registry: docker.io
    repository: nginx
    tag: 1.23.1-alpine
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath: /etc/nginx/conf.d
    size: 512Mi
    annotations: {}
    labels: {}
    selector: {}
  
  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: http-ext
        protocol: TCP
        port: 80
        targetPort: 9000

taigaProtected:
  image:
    registry: docker.io
    repository: taigaio/taiga-protected
    tag: 6.5.0
    digest: ""

    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  
  labels: {}
  podLabels: {}

  updateStrategy:
    type: RollingUpdate
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    labels: {}
    ports:
      - name: prot
        protocol: TCP
        port: 8003
        targetPort: 8003
    
    
media:
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath:
      back: /taiga-back/static
      gateway: /taiga/static
    size: 2Gi
    annotations: {}
    labels: {}
    selector: {}
static:
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath:
      back: /taiga-back/static
      gateway: /taiga/static
    size: 1Gi
    annotations: {}
    labels: {}
    selector: {}

taiga:
  url: "http://localhost:9000"
  websocketsURL: "ws://localhost:9000"
  secretKey: "taiga-back-secret-key"
  sitesDomain: "localhost"
  sitesScheme: "http"
  enableRegistration: true
  enableSlack: false
  enableGravatar: true
  enableDebug: false
  defaultLanguage: en


  postgresql:
    enabled: true
    auth:
      username: taiga
      password: ""
      database: taiga
      existingSecret: ""
    architecture: "standalone"

  externalDatabase:
  host: ""
  port: 5432
  user: taiga
  database: taiga
  password: ""
  existingSecret: ""

  email:
    enable: false
    backend: django.core.mail.backends.smtp.EmailBackend
    host: ""
    port: 25
    user: ""
    password: ""
    TLS: false
    SSL: false
    from: "Taiga <noreply@example.com>"
  
  telemetry:
    enable: true
  
  rabbitmq:
    user: taiga
    password: taiga
    vhost: taiga
    cookieSecret: "secret-erlang-cookie"
  
  github:
    auth:
      enable: false
      apiClientID: ""
      apiClientSecret: ""
      existingSecret: ""
    importer:
      enable: false
      apiClientID: ""
      apiClientSecret: ""
  
  gitlab:
    enable: false
    apiClientID: ""
    apiClientSecret: ""
    url: ""
  
  jira:
    enable: false
    consumerKey: ""
    certificate: ""
    publicCertificate: ""
  
  trello:
    enable: false
    apiKey: ""
    secretKey: ""
  
  maxAge: 360
    


# env:  
  # enableEmail: false
  # emailBackend: "django.core.mail.backends.smtp.EmailBackend"
  # defaultFromEmail: "no-reply@example.com"
  # emailHost: "smtp.host.example.com"
  # emailPort: "587"
  # emailHostUser: "user"
  # emailHostPassword: "password"
  # emailUseTLS: "true"
  # emailUseSSL: "true"
  # enableTelemetry: "true"
  # rabbitmqPass: "taiga"
  # rabbitmqUser: "taiga"
  # rabbitmqErlangCookie: "secret-erlang-cookie"
  # rabbitmqVhost: "taiga"
  # enableGithubAuth: false
  # githubApiClientID: "github-api-client-id"
  # githubApiClientSecret: "github-api-client-secret"
  # enableGitlabAuth: false
  # gitlabClientID: "gitlab-client-id"
  # gitlabApiClientSecret: "gitlab-api-client-secret"
  # gitlabURL: "gitlab-url"
  # enableGithubImporter: false
  # githubImporterClientID: "client-id-from-github"
  # githubImporterClientSecret: "client-secret-from-github"
  # enableJiraImporter: false
  # jiraImporterConsumerKey: "consumer-key-from-jira"
  # jiraImporterCert: "cert-from-jira"
  # jiraImporterPubCert: "pub-cert-from-jira"
  # enableTrelloImporter: false
  # trelloImporterApiKey: "api-key-from-trello"
  # trelloImporterSecretKey: "secret-key-from-trello"
  # maxAge: "360"
  # enableGravatar: false

# taigaAsyncRabbitmq:
#   image:
#     repository: rabbitmq
#     pullPolicy: IfNotPresent
#     tag: "3-management-alpine"
#   persistence:
#     ## Volume used to store the Taiga Async RabbitMQ's data. Default is boolean `false`.
#     ##
#     enabled: false
#     size: '100Mi'
#     ## Sets persistent volume claim's storageClassName. Defaults to `default`.
#     ##
#     storageClassName: 'default'
#     accessMode: 'ReadWriteOnce'
#   service:
#     type: ClusterIP
#     port: 5672

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaAsync:

#   image:
#     repository: taigaio/taiga-back      
#     pullPolicy: IfNotPresent
#     tag: "{{ .Chart.AppVersion }}"

#   service:
#     type: ClusterIP
#     port: 8000

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}

  
# taigaBack:

#   image:
#     repository: taigaio/taiga-back
#     pullPolicy: IfNotPresent
#     tag: " {{ .Chart.AppVersion }}"

#   service:
#     type: ClusterIP
#     port: 8000

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaDB:

#   enable: true

#   image:
#     repository: postgres     
#     pullPolicy: IfNotPresent
#     tag: "12.3"

#   persistence:
#     ## Volume used to store Taiga DB data. Default is boolean `false`.
#     ##
#     enabled: false
#     size: '100Mi'
#     ## Sets persistent volume claim's storageClassName. Defaults to `default`.
#     ##
#     storageClassName: 'default'
#     accessMode: 'ReadWriteOnce'

#   service:
#     type: ClusterIP
#     port: 5432

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaEventsRabbitmq:

#   image:
#     repository: rabbitmq      
#     pullPolicy: IfNotPresent
#     tag: "3-management-alpine"

#   persistence:
#     ## Volume used to store the Taiga Events RabbitMQ's data. Default is boolean `false`.
#     ##
#     enabled: false
#     size: '100Mi'
#     ## Sets persistent volume claim's storageClassName. Defaults to `default`.
#     ##
#     storageClassName: 'default'
#     accessMode: 'ReadWriteOnce'

#   service:
#     type: ClusterIP
#     port: 5672

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaEvents:

#   image:
#     repository: taigaio/taiga-events     
#     pullPolicy: IfNotPresent
#     tag: "6.1.1"

#   service:
#     type: ClusterIP
#     port: 8888

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaFront:

#   image:
#     repository: taigaio/taiga-front  
#     pullPolicy: IfNotPresent
#     tag: "{{ .Chart.AppVersion }}"

#   service:
#     type: ClusterIP
#     port: 80

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaGateway:

#   image:
#     repository: nginx    
#     pullPolicy: IfNotPresent
#     tag: "1.19-alpine"

#   persistence:
#     ## Volume used to store the Taiga Gateway's data. Default is boolean `false`.
#     ##
#     enabled: false
#     size: '100Mi'
#     ## Sets persistent volume claim's storageClassName. Defaults to `default`.
#     ##
#     storageClassName: 'default'
#     accessMode: 'ReadWriteOnce'

#   ingress:
#     enable: false
#     annotations:
#     # traefik.ingress.kubernetes.io/router.entrypoints: websecure
#     # traefik.ingress.kubernetes.io/router.tls: 'true'
#     # traefik.ingress.kubernetes.io/service.sticky.cookie: 'true'
#     hosts:
#       - host: taiga.example.com
#         paths:
#           -  "/"

#   service:
#     type: ClusterIP
#     port: 9000

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}


# taigaProtected:

#   image:
#     repository: taigaio/taiga-protected     
#     pullPolicy: IfNotPresent
#     tag: "{{ .Chart.AppVersion }}"

#   service:
#     type: ClusterIP
#     port: 8003

#   podAnnotations: {}

#   podSecurityContext: {}
#     # fsGroup: 2000

#   securityContext: {}
#     # capabilities:
#     #   drop:
#     #   - ALL
#     # readOnlyRootFilesystem: true
#     # runAsNonRoot: true
#     # runAsUser: 1000

#   resources: {}

#   nodeSelector: {}

#   tolerations: []

#   affinity: {}
